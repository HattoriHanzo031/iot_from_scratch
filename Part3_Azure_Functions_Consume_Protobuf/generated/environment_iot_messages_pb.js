/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.iotexample.DeviceMessages', null, global);
goog.exportSymbol('proto.iotexample.EnvironmentData', null, global);
goog.exportSymbol('proto.iotexample.ErrorLevel', null, global);
goog.exportSymbol('proto.iotexample.Event', null, global);
goog.exportSymbol('proto.iotexample.TelemetryMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotexample.EnvironmentData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.iotexample.EnvironmentData.oneofGroups_);
};
goog.inherits(proto.iotexample.EnvironmentData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotexample.EnvironmentData.displayName = 'proto.iotexample.EnvironmentData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotexample.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotexample.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotexample.Event.displayName = 'proto.iotexample.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotexample.TelemetryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.iotexample.TelemetryMessage.oneofGroups_);
};
goog.inherits(proto.iotexample.TelemetryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotexample.TelemetryMessage.displayName = 'proto.iotexample.TelemetryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotexample.DeviceMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iotexample.DeviceMessages.repeatedFields_, null);
};
goog.inherits(proto.iotexample.DeviceMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotexample.DeviceMessages.displayName = 'proto.iotexample.DeviceMessages';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.iotexample.EnvironmentData.oneofGroups_ = [[4],[5]];

/**
 * @enum {number}
 */
proto.iotexample.EnvironmentData.Co2LevelOneofCase = {
  CO2_LEVEL_ONEOF_NOT_SET: 0,
  CO2_LEVEL: 4
};

/**
 * @return {proto.iotexample.EnvironmentData.Co2LevelOneofCase}
 */
proto.iotexample.EnvironmentData.prototype.getCo2LevelOneofCase = function() {
  return /** @type {proto.iotexample.EnvironmentData.Co2LevelOneofCase} */(jspb.Message.computeOneofCase(this, proto.iotexample.EnvironmentData.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.iotexample.EnvironmentData.AmbientLightOneofCase = {
  AMBIENT_LIGHT_ONEOF_NOT_SET: 0,
  AMBIENT_LIGHT: 5
};

/**
 * @return {proto.iotexample.EnvironmentData.AmbientLightOneofCase}
 */
proto.iotexample.EnvironmentData.prototype.getAmbientLightOneofCase = function() {
  return /** @type {proto.iotexample.EnvironmentData.AmbientLightOneofCase} */(jspb.Message.computeOneofCase(this, proto.iotexample.EnvironmentData.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotexample.EnvironmentData.prototype.toObject = function(opt_includeInstance) {
  return proto.iotexample.EnvironmentData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotexample.EnvironmentData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.EnvironmentData.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    pressure: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    humidity: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    co2Level: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    ambientLight: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotexample.EnvironmentData}
 */
proto.iotexample.EnvironmentData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotexample.EnvironmentData;
  return proto.iotexample.EnvironmentData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotexample.EnvironmentData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotexample.EnvironmentData}
 */
proto.iotexample.EnvironmentData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemperature(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPressure(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHumidity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCo2Level(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmbientLight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotexample.EnvironmentData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotexample.EnvironmentData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotexample.EnvironmentData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.EnvironmentData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getHumidity();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double temperature = 1;
 * @return {number}
 */
proto.iotexample.EnvironmentData.prototype.getTemperature = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.iotexample.EnvironmentData.prototype.setTemperature = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double pressure = 2;
 * @return {number}
 */
proto.iotexample.EnvironmentData.prototype.getPressure = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.iotexample.EnvironmentData.prototype.setPressure = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double humidity = 3;
 * @return {number}
 */
proto.iotexample.EnvironmentData.prototype.getHumidity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.iotexample.EnvironmentData.prototype.setHumidity = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double co2_level = 4;
 * @return {number}
 */
proto.iotexample.EnvironmentData.prototype.getCo2Level = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.iotexample.EnvironmentData.prototype.setCo2Level = function(value) {
  jspb.Message.setOneofField(this, 4, proto.iotexample.EnvironmentData.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.iotexample.EnvironmentData.prototype.clearCo2Level = function() {
  jspb.Message.setOneofField(this, 4, proto.iotexample.EnvironmentData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iotexample.EnvironmentData.prototype.hasCo2Level = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double ambient_light = 5;
 * @return {number}
 */
proto.iotexample.EnvironmentData.prototype.getAmbientLight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.iotexample.EnvironmentData.prototype.setAmbientLight = function(value) {
  jspb.Message.setOneofField(this, 5, proto.iotexample.EnvironmentData.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 */
proto.iotexample.EnvironmentData.prototype.clearAmbientLight = function() {
  jspb.Message.setOneofField(this, 5, proto.iotexample.EnvironmentData.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iotexample.EnvironmentData.prototype.hasAmbientLight = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotexample.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.iotexample.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotexample.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotexample.Event}
 */
proto.iotexample.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotexample.Event;
  return proto.iotexample.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotexample.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotexample.Event}
 */
proto.iotexample.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.iotexample.ErrorLevel} */ (reader.readEnum());
      msg.setErrorLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotexample.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotexample.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotexample.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrorLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 event_number = 1;
 * @return {number}
 */
proto.iotexample.Event.prototype.getEventNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iotexample.Event.prototype.setEventNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ErrorLevel error_level = 2;
 * @return {!proto.iotexample.ErrorLevel}
 */
proto.iotexample.Event.prototype.getErrorLevel = function() {
  return /** @type {!proto.iotexample.ErrorLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.iotexample.ErrorLevel} value */
proto.iotexample.Event.prototype.setErrorLevel = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.iotexample.Event.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iotexample.Event.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.iotexample.TelemetryMessage.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.iotexample.TelemetryMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  ENVIRONMENT_DATA: 2,
  EVENT: 3
};

/**
 * @return {proto.iotexample.TelemetryMessage.PayloadCase}
 */
proto.iotexample.TelemetryMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.iotexample.TelemetryMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.iotexample.TelemetryMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotexample.TelemetryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.iotexample.TelemetryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotexample.TelemetryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.TelemetryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    environmentData: (f = msg.getEnvironmentData()) && proto.iotexample.EnvironmentData.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.iotexample.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotexample.TelemetryMessage}
 */
proto.iotexample.TelemetryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotexample.TelemetryMessage;
  return proto.iotexample.TelemetryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotexample.TelemetryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotexample.TelemetryMessage}
 */
proto.iotexample.TelemetryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.iotexample.EnvironmentData;
      reader.readMessage(value,proto.iotexample.EnvironmentData.deserializeBinaryFromReader);
      msg.setEnvironmentData(value);
      break;
    case 3:
      var value = new proto.iotexample.Event;
      reader.readMessage(value,proto.iotexample.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotexample.TelemetryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotexample.TelemetryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotexample.TelemetryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.TelemetryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEnvironmentData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.iotexample.EnvironmentData.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.iotexample.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.iotexample.TelemetryMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iotexample.TelemetryMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EnvironmentData environment_data = 2;
 * @return {?proto.iotexample.EnvironmentData}
 */
proto.iotexample.TelemetryMessage.prototype.getEnvironmentData = function() {
  return /** @type{?proto.iotexample.EnvironmentData} */ (
    jspb.Message.getWrapperField(this, proto.iotexample.EnvironmentData, 2));
};


/** @param {?proto.iotexample.EnvironmentData|undefined} value */
proto.iotexample.TelemetryMessage.prototype.setEnvironmentData = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.iotexample.TelemetryMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.iotexample.TelemetryMessage.prototype.clearEnvironmentData = function() {
  this.setEnvironmentData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iotexample.TelemetryMessage.prototype.hasEnvironmentData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Event event = 3;
 * @return {?proto.iotexample.Event}
 */
proto.iotexample.TelemetryMessage.prototype.getEvent = function() {
  return /** @type{?proto.iotexample.Event} */ (
    jspb.Message.getWrapperField(this, proto.iotexample.Event, 3));
};


/** @param {?proto.iotexample.Event|undefined} value */
proto.iotexample.TelemetryMessage.prototype.setEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.iotexample.TelemetryMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.iotexample.TelemetryMessage.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iotexample.TelemetryMessage.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iotexample.DeviceMessages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotexample.DeviceMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.iotexample.DeviceMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotexample.DeviceMessages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.DeviceMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    telemetryMessagesList: jspb.Message.toObjectList(msg.getTelemetryMessagesList(),
    proto.iotexample.TelemetryMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotexample.DeviceMessages}
 */
proto.iotexample.DeviceMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotexample.DeviceMessages;
  return proto.iotexample.DeviceMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotexample.DeviceMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotexample.DeviceMessages}
 */
proto.iotexample.DeviceMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iotexample.TelemetryMessage;
      reader.readMessage(value,proto.iotexample.TelemetryMessage.deserializeBinaryFromReader);
      msg.addTelemetryMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotexample.DeviceMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotexample.DeviceMessages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotexample.DeviceMessages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexample.DeviceMessages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTelemetryMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.iotexample.TelemetryMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TelemetryMessage telemetry_messages = 1;
 * @return {!Array<!proto.iotexample.TelemetryMessage>}
 */
proto.iotexample.DeviceMessages.prototype.getTelemetryMessagesList = function() {
  return /** @type{!Array<!proto.iotexample.TelemetryMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iotexample.TelemetryMessage, 1));
};


/** @param {!Array<!proto.iotexample.TelemetryMessage>} value */
proto.iotexample.DeviceMessages.prototype.setTelemetryMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.iotexample.TelemetryMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iotexample.TelemetryMessage}
 */
proto.iotexample.DeviceMessages.prototype.addTelemetryMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.iotexample.TelemetryMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.iotexample.DeviceMessages.prototype.clearTelemetryMessagesList = function() {
  this.setTelemetryMessagesList([]);
};


/**
 * @enum {number}
 */
proto.iotexample.ErrorLevel = {
  UNSPECIFIED: 0,
  ERROR: 1,
  WARNING: 2,
  INFO: 3
};

goog.object.extend(exports, proto.iotexample);
